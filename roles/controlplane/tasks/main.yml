---
- name: Allow Kubernetes controlplane through firewall
  ansible.posix.firewalld:
    service: kube-control-plane
    state: enabled
    permanent: true
    immediate: true
  become: yes

- name: Check if cluster is already initialised
  ansible.builtin.command: "kubectl cluster-info --kubeconfig=/etc/kubernetes/admin.conf"
  register: initcheck
  failed_when: initcheck.rc == -5
  become: yes
 

- name: Debug initcheck
  ansible.builtin.debug:
    var: initcheck.rc

- name: Kubeadm init
  ansible.builtin.command: "kubeadm init --apiserver-advertise-address={{clusterips.0}} --pod-network-cidr {{cpnetcidr}}" 
  when: initcheck.rc != 0
  become: yes
  ignore_errors: True

- name: Get join string
  ansible.builtin.shell: "kubeadm token create --print-join-command"
  register: join_command
  become: yes

- name: Create directory for config
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~{{ ansible_ssh_user }}/.kube/config
    state: link
    mode: 0644
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
  become: yes
- name: Pass join token to nodes
  ansible.builtin.set_fact:
    joincmd: "{{join_command.stdout}}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['workernodes'] }}"

- name: Copy flannel CNI config
  ansible.builtin.copy:
    src: ../files/flannelcfg.yml
    dest: /tmp/

- name: Instaling CNI
  shell: "kubectl apply -f /tmp/flannelcfg.yml --kubeconfig=/etc/kubernetes/admin.conf"
  become: yes